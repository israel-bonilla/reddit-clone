type Comment {
  created_at: DateTime
  id: ID!
  post_id: ID
  text: String
  username: String
}

type Post {
  body: String
  created_at: DateTime
  id: ID!
  image: String
  subreddit_id: ID
  title: String
  username: String
  votes: [Vote]
    @materializer(
      query: "getVotesByPostId"
      arguments: [{ name: "post_id", field: "id" }]
    )
  comments: [Comment]
    @materializer(
      query: "getCommentsByPostId"
      arguments: [{ name: "post_id", field: "id" }]
    )
  subreddit: [Subreddit]
    @materializer(
      query: "getSubredditListById"
      arguments: [{ name: "id", field: "subreddit_id" }]
    )
}

type Subreddit {
  created_at: DateTime
  id: ID!
  topic: String
}

type Vote {
  created_at: DateTime
  id: ID!
  post_id: ID!
  vote_type: String!
  username: String!
}

type Query {
  getPostsByTopic(topic: String!): [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      select *, "post".id as id from "post"
      join "subreddit" on "subreddit"."id" = "post"."subreddit_id"
      where "subreddit"."topic" = $1
      order by "post"."created_at" desc
      """
      configuration: "postgresql_config"
    )
  getPostByPostId(post_id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      select * from "public"."post" where "post"."id" = $1
      """
      configuration: "postgresql_config"
    )
  getVotesByPostId(post_id: ID!): [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      select * from "public"."vote" where "post_id" = $1
      order by "created_at" desc
      """
      configuration: "postgresql_config"
    )
  getSubredditListById(id: ID!): [Subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      select * from "subreddit" where "id" = $1
      """
      configuration: "postgresql_config"
    )
  getCommentList: [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  getCommentsByPostId(post_id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      select * from "public"."comment" where "post_id" = $1
      order by "created_at" desc
      """
      configuration: "postgresql_config"
    )
  getPostList: [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      select * from "post"
      order by "created_at" desc
      """
      configuration: "postgresql_config"
    )
  getSubredditList: [Subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      configuration: "postgresql_config"
    )
  getSubredditListWithLimit(limit: Int!): [Subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      select * from "subreddit"
      order by "created_at" desc
      limit $1
      """
      configuration: "postgresql_config"
    )
  getSubredditListByTopic(topic: String!): [Subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      select * from "public"."subreddit" where "topic" = $1
      """
      configuration: "postgresql_config"
    )
  getVoteList: [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      configuration: "postgresql_config"
    )
}

type Mutation {
  insertComment(post_id: ID!, username: String!, text: String!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: INSERT
      configuration: "postgresql_config"
    )
  insertPost(
    image: String!
    body: String!
    subreddit_id: ID!
    title: String!
    username: String!
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: INSERT
      configuration: "postgresql_config"
    )
  insertVote(post_id: ID!, username: String!, vote_type: String!): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deletePost(
    image: String!
    id: ID!
    body: String!
    created_at: DateTime!
    subreddit_id: ID!
    title: String!
    username: String!
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: DELETE
      configuration: "postgresql_config"
    )
  deleteVote(id: ID!): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertSubreddit(topic: String!): Subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      dml: INSERT
      configuration: "postgresql_config"
    )
}
